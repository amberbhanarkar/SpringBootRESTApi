package com.springboot.springbootrestapi.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.springboot.springbootrestapi.dao.StudentDao;
import com.springboot.springbootrestapi.model.Student;

@RestController
@RequestMapping("/school")
public class StudentController {
	
	@Autowired
	StudentDao studentDao;

	/*Create a student*/
	@PostMapping("/students")
	public Student createStudent(@Valid @RequestBody Student stu) {
		return studentDao.create(stu);
	}
	
	/*get all students*/
	@GetMapping("/students")
	public List<Student> getAllSudents(){
		return studentDao.findAll();
	}
	
	/*get student by id*/
	@GetMapping("/students/{id}")
	public ResponseEntity<Student> getStudentById(@PathVariable(value="id")Long stuid) {
		Student stu=studentDao.findOne(stuid);
		if(stu==null) {
			return ResponseEntity.notFound().build();
		}
		return ResponseEntity.ok().body(stu);
	}
	
	/*update student by stuid*/
	@PutMapping("/students/{id}")
	public ResponseEntity<Student> updateStudent(@PathVariable(value="id")Long stuid, @Valid @RequestBody Student stuDetails){
		Student stu=studentDao.findOne(stuid);
		if(stu==null) {
			return ResponseEntity.notFound().build();
		}
		stu.setName(stuDetails.getName());
		stu.setRollnum(stuDetails.getRollnum());
		stu.setStandard(stuDetails.getStandard());
		stu.setSection(stuDetails.getSection());
		stu.setPercentage(stuDetails.getPercentage());
		stu.setAdmDate(stuDetails.getAdmDate());
		
		Student updateStudent=studentDao.create(stu);
		return ResponseEntity.ok().body(updateStudent);
	}
	
	/*Delete Student*/
	@DeleteMapping("/students/{id}")
	public ResponseEntity<Student> deleteStudent(@PathVariable(value="id") Long stuid){
		Student stu=studentDao.findOne(stuid);
		if(stu==null) {
			return ResponseEntity.notFound().build();
		}
		studentDao.delete(stu);
		return ResponseEntity.ok().build()
		
	}
	
}
